About Dynamic-Link Libraries
Dynamic linking allows a module to include only the information needed to locate an exported DLL function at load time or run time. Dynamic linking differs from the more familiar static linking, in which the linker copies a library function's code into each module that calls it.

Types of Dynamic Linking
load-time dynamic linking : a module makes explicit calls to exported DLL functions as if they were local functions. This requires you to link the module with the import library for the DLL that contains the functions. An import library supplies the system with the information needed to load the DLL and locate the exported DLL functions when the application is loaded.
run-time dynamic linking : a module uses the LoadLibrary or LoadLibraryEx function to load the DLL at run time. After the DLL is Loaded, the module calls the GetProcAddress function to get the addresses of the exported DLL functions. The Module calls the exported DLL functions using the function pointer returened by GetProcAddress. This eliminated the need for an import library.

DLLs and Memory Management
Every process that loads the DLL maps it into its virtual address space. After the process loads the DLL into its virtual address, it can call the exported DLL functions.

The system maintains a per-proces sreference count for each DLL. When a thread loads the DLL, the reference count is incremented by one. When the process terminates, or when the reference count becomes zero (run-time dynamic linking only), the DLL is unloaded from the virtual address space of the process.

Like any other function, an exported DLL function runs in the context of the thread that calls it. Therefore, the following conditions apply:
The threads of the process that called the DLL can use handles opened by a DLL function. Similary, handles opened by any thread of the calling process can be used in the DLL function.
The DLL uses the stack of the calling thread and the virtual address space of the calling process.
The DLL allocates memory from the virtual address space of the calling process.

Advantages of Dynamic Linking
Multiple processes that load the same DLL at the same base address share a single copy of the DLL in physical memory. Doing this saves system memory and reduces swapping.
When the functions in a DLL change, the applications that use them do not need to be recompiled or relinked as long as the function arguments, calling conventions, and return values do not change. In contrast, statically linked object code requires that the application be relinked when the functions change.
A DLL can provide after-market support. For example, a display driver DLL can be modified to support a display that was not available when the application was initially shipped.
Programs written in different programming languages can call the same DLL function as long as the programs follow the same calling convention that the function uses. The calling convention (such as C, Pascal, or standard call) controls the order in which the calling function must push the arguments onto the statck, whether the function or the calling function is responsible for cleaning up the stack, and whether any arguments are passed in registers. For more information, see the documentation included with your compiler.

A Potential disadvange to using DLLs is that the application is not self-contained; it depends on the existence of a separte DLL module. The system terminates processes using load-time dynamic linking if they require a DLL that is not found at process startup and gived an error message to the user. The system does not terminate a process using run-time dynamic linking in this situation, but functions exported by the missing DLL are not available to the program.

Dynamic-link library Entry-Point function
A Dll can optionally specify an entry-point function. If present, the system calls the entry-point function whenever a process or thread loads or unloads the DLL.  It can be used to perform simple initialization and cleanup tasks. For example, it can set up thread local storage when a new thread is created, and clean it up when the thread is terminated.

If you are linking your DLL with the C run-time library, it may provide an entry-point function of you, and allow you to provide a seperate initialization function. Check the documentation for your run-time libarary for more information.

If you are providing your own entry-point, see the DllMain function. The name DLLMain is a  placeholder for a user-defined function. You must specify the actual name you use when you build your DLL. For more information, see the documentation included with your development tools.

Calling the Entry-Point function
The system calls the entry-point function whenever any one of the following events occurs:
A process loads the DLL. For processes using load-time dynamic linking, the DLL is loaded during process initialization. For processes using run-time linking, the DLL is loaded before LoadLibrary or LoadLibraryEx returns.
A process unloads the DLL. The DLL is unlaoded when the process terminates or calls the FreeLibrary function and the reference count becomes zero. If the process terminates as a result of the TerminateProcess or TerminateThread function, the system does not call the DLL entry-point function.
A new thread is created in a process that has loaded the DLL. You can use the Disable ThreadLibraryCalls function to disable notification when threads are created.
A thread of a process that has loaded the DLL terminates normally, not using TerminateThread or TerminateProcess. When a process unloads the DLL, the entry point function is called only once for the entire process, rather than once for each existing thread of the proess. You can use DisableThreadLibraryCalls to disable notification when threads are terminated.

Only one thread at a time can call the entry-point function.

The system calls the entry-point function in the context of the process or thread that caused the function to be called. This allows a DLL to use its entry-point function for allocating memory in the virtual address space of the calling process or to open handles accessible to the process. The entry-point function can also allocate memory that is private to a new thread by using thread local storage. For more informatino about thread local storage, see Thread Local Storage.

Entry-Point function Definition
The Dll entry-point function must be declared with the standard-call calling convention. If the DLL entry point is note declared correctly, the DLL is not loaded, and the system displays a message indicating that the DLL entry point must be declared with WINAPI.

In the body of the function, you may handle any combination of the following scenarios in which the DLL entry point has been called:
* A Process loads the DLL(DLL_PROCESS_ATTACH).
* The current process creates a new thread(DLL_THREAD_ATTACH)
* A thread exits normally(DLL_THREAD_DETACH)
* A process unloads the DLL(DLL_PROCESS_DETCH)

The entiry-point function should perform only simple initialization tasks. It must not call the LoadLibrary or LoadLibraryEx function(or a function that calls thease functions), because this may create dependency loops in the DLL load order. This can result in a DLL being used before the system has executed its initializatino code. Similarly, the entry-point function must not call the FreeLibrary function(or a function that calls FreeLibrary) during process termination, because this can result in a DLL being used after the system has executed its termination code.

Because Kernel32.dll is guaranteed to be loaded in the process address space when the entry-point function is called, calling functions in Kernel32.dll does not result in the DLL being used before its initialization code has been execueted. Therefor, the entry-point function can create synchronization objects such as critical sections and mutexes, and use TLS, because these functions are located in Kernel32.dll. It is not safe to call the registry functions, forexample, because they are located in advapi32.dll.

Calling other functions may result in problems that are difficult to diagnose. For example, calling User, Shell, and COM functions can cause access violation erros, because some functions in their DLLs call LoadLibrary to load other system components. Conversely, calling those functions during termination can cause access violation erros because the corresponding componet may already have been unloaded or uninitialized.

The following example demonstarates how to structure the DLL entry-point function.

BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,  // handle to DLL module
    DWORD fdwReason,     // reason for calling function
    LPVOID lpReserved )  // reserved
{
    // Perform actions based on the reason for calling.
    switch( fdwReason ) 
    { 
        case DLL_PROCESS_ATTACH:
         // Initialize once for each new process.
         // Return FALSE to fail DLL load.
            break;

        case DLL_THREAD_ATTACH:
         // Do thread-specific initialization.
            break;

        case DLL_THREAD_DETACH:
         // Do thread-specific cleanup.
            break;

        case DLL_PROCESS_DETACH:
         // Perform any necessary cleanup.
            break;
    }
    return TRUE;  // Successful DLL_PROCESS_ATTACH.
}


Entry-Point Function Return Value
When a Dll Entry-point function is called because a process is loading, the function returns TRUE to indicate success. For processes using load-time linking, a return value of FALSE causes the process initialization to fail and the process terminates. For processes using run-time linking, a return value of FALSE causes the LoadLibrary or LoadLibraryEx function to return NULL, indicating failure.(The system immediately calls your entry-point function with DLL_PROCESS_DETACH and unloads the DLL.) The return value of the entry-point function is disregared when the function is called for any other reason.

Load-Time Dynamic Linking
When the system starts a program that uses load-time dynamic linking, it uses the information the linker placed in the file to locate the names of the DLLs that are used by the process. The system then searches for the DLLs. For more information, see Dynamic-Link Library Search Order.

If the system cannot locate a required DLL, it terminates the process and displays a dialog box that reports the error to the user. Otherwise, the system maps the DLL into the virtual address space of the process and increments the DLL reference count.

The system calls the entry-point function. The function receives a code indicating that the process is loading the DLL. If the entry-point function does not return tTRUE, the system terminates the process and reports the error. For more information about the entry-point function, see Dynamic-Link Library Entry-Point function.

Finally, the system modifies the function address table with the starting addresses for the imported DLL functions.

The DLL is mapped into the virtual address space of the process during its initilization and is loaded into physical memory only when needed.


Run-Time Dynamic Linking
When the application calls the LoadLibrary or LoadLibraryEx functions, the system attemps to locate the DLL(for details, see Dynamic-Link Library Search Order). If the search succeeds, the system maps the DLL module into the virtual address space of the process and increments the reference count. If the call to LoadLibrary or LoadLibraryEx specifies a DLL whose code is already mapped into the virtual address space of the calling process, the function simply returnes a handle to the DLL and increments the DLL reference count. Note that two DLLs that have the same base file name and extension but are found in different directories are not considered to be the same DLL.

The system calls the entry-point function in the context of the thread that called LoadLibrary or LoadLibraryEx. The entry-point function is not called if the DLL was already loaded by the process through a call to LoadLibrary or LoadLibraryEx with no corresponding call to the FreeLibrary function.

If the system cannot find the DLL or if the entry-point function returns FALSE, LoadLibrary or LoadLibraryEx returns NULL. If LoadLibrary or LoadLibraryEx succeeds, it returns a handle to the DLL module. The process can use this handle to indentify the DLL in a call to the GetProcAddress, FreeLibrary, or FreeLibraryAndExitThread function.

The GetMoudleHandle function returns a handle used in GetProcAddress, FreeLibrary, or FreeLibraryAndExitThread. The GetModuleHandle function succeeds only if the DLL module is already mapped into the adress space of the process by load-time linking or by previus call to LoadLibrary or LoadLibraryEx. Unlike LoadLibrary or LoadLibraryEx, GetModuleHandle does not increment the module reference count. The GetModuleFileName function retreives the full path of the module associated with a handle returned by GetModuleHandle, LoadLibrary, or LoadLibraryEx.

The process can use GetProcAddress to get the address of an exported function in the DLL unsing a DLL module handle returnd by loadlibrary or LoadLIbrayEx, GetModuleHandle.

When the DLL module is no longer needed, the process can call FreeLibrary or FreeLibraryAndExitThread. These functions decrement the dmodule reference count and unmap the DLL code freom the virtual address space of the process if the reference count is zero.

Run-time dynamic linking enables the process to continue running even if a DLL is not available. The process can then use an alternate method to accomplish its objective. For example, if a process is unable to locate one DLL, it can try to use another, or it can notify the user of an error. If the user can provide the full path of the missing DLL, the process can use this information to load the DLL even through it is not in the normal search path. This situation contrasts with load-time linking, in which the system simply terminates the process if it cannot find the DLL.

Run-time dynamic linking can cause problems if the dll uses the DLLMain function to perform initializatino for each thread of a process, becuaes the entry-point is not called for threads that existed before LoadLibrary or LoadLibraryEx is called. for an example showing how to deal with this problem, see Using Thread Local Storage in a Dynamic-Link Library.

Dynamic-Link Library Search order

A system can contain multiple version of the same dynamic-link library(dll). Application can control the location from which a dll is loaded by specifying a full path or using another mechanism such as a manifest. If these methods are not used, the system searches for the dll at load time as described in this topic.

Dynamic-Link Library Data
A Dynamic-Link Library(DLL) can contain global data or local data.

Variable Scope

Variables that are declared as global in a DLL source code file are treated as global variables by the compiler and linker, but each process that loads a given DLL gets its own copy of that DLL's global variables. The scope of static variables is limited to the block in which the static variables are declared. As a result, each process has its own instanc eof the DLL global and static variables by default.

Note Your development tools mayh allow you to override the default behavior. For example, the Visual C++ compiler supports #pragma section and the linker supports the /SCTION option. For more information see the documentation included with your development tools.

Dynamic Memory Allocation
When a DLL allocates memory using any of the memory allocation functions(GlobalAlloc, LocalAlloc, HeapAlloc, Virtual Alloc), the memory is allocated in the virtual address space of the calling process and is accessible only to the threads of that process.

A DLL can use file mapping to allocate memory that can be shared among processes. For a general discussion of how to use file mapping to create named shared memory, see File mapping. For an example that uses the DLLMain function to set up shared memory using file mapping, see Using shared Memory in a Dynamic-Link Library.

Thread Local Storage
The thread localstorage(TLS) functions enable a DLL to allocate an index for storing and retreiving a different value for each thread of a multithreaded process. For example, a spreadsheet application can create a new instance of the same thread each time the user opens a new spreadsheet. A DLL providing the functions for various spreadsheet operations can useTLS to save information about the current state of each spreadsheet(row, column, and so on). For a general discussion of thread local storage, see Thread Local Storage. For an example that uses the DllMain function to set up thread local storage, see Using Thread Local Storage in a Dynamic-link Library.

Windows Server 2003 and Windows XP: The Visual C++ compiler supports a syntax that enabled you to declare thread-local variables: _declspec(thread). If you use this syntax in a DLL, you will not be able to load the DLL explicitly using LoadLibrary or LoadLibraryEx on versions of Windows prior to Windows Vista. If your DLL will be loaded explicitly, you must use the thread local storage functions instead of _declspec(thread).

Dynamic_link Library Redirection

Application can depend on a specific version of a shared DLL and start to fail if another application is installed with a newer or older version of the same DLL. Therer are two ways to ensure that your application uses the correct DLL. DLL redirection and side-by-side components. Developers and administrators should use DLL redirection for existing applications, because it does not require any changes to the application. If you are creating a new application or updating an application and want to isolate your application from potential problmes, create a side-by-side componets.

To use DLL redirection, create a redirection file for your application. The redirection file must be named as follows: APP_name.local. For example, if the application name is editor.exe, the redirection file should be named editor.exe.local. you must install the .local file in the application directory. You must also install the DLLs in the application directory.

The contents of a redirection file are ignored, but its presence causes Windows to check the application directory first whenever it loads a DLL, regardless of the path specified to LoadLibrary or LoadLibraryEx. If the DLL is not found in the application directory, then thease functions use their usual search order. For example, if the application c:\myapp\myapp.exe calls LoadLibrary using the following path:

c:\program files\common files\system\mydll.dll

And, if both c:\myapp\myapp.exe.local and c:\myapp\mydll.dll exist, LoadLibrary loads c:\myapp\mydll.dll. otherwise, LoadLibrary loads c:\program files\common files\system\mydll.dll.

Alternatively, if a directory named c:\myapp\myapp.exe.local exists and contains mydll.dll, loadlibrary loads c:\myapp\myapp.exe.local\mydll.dll

Known DLLs cannot be redirected. For a list of known DLLs, see the following registry key.

If the application has a manifest, then any .local files are ignored.

If you are using DLL redirection and the application does not have access to all drives and directories in the search order, LoadLibrary stops searching as soon as access is denied.(If you are not using DLL redirection, LoadLibrary skips directories that it cannot access and then continues searching.)

It is good practivce to install application DLLs in the same directory that contains the application, even if you are not using DLL redirection. This ensures that installing the application does not overwirte other copies of the DLL and cause other applications to fail. Also, if you follow this good practice, other applications do not overwrite your copy of the DLL and cause your application to fail.

Dynamic-Link Library Updates

it is sometimes necessary to replace a DLL with a newer version. Before replacing a DLL, perform a version check to ensure that you are replacing an older version with a newer version. It is possible to replace a DLL that is in use. The method you use to replace DLLs that are in use depends on the operating system you are using. On Windows XP and later, application should use Isolated Applications and side-by-side-assemblies.

It is not necessary to restart the computer if you perform the following steps:

1. Use the MoveFileEx function to rename the DLL being replaced. Do not specify MOVEFILE_COPY_ALLOWED, and make sure the renamed file is on the same volume that contains the original file. You could also aimply rename the file in the same directory by giving it a different extension.
2. Copy the new DLL to the directory that contains the renamed DLL. All application will now use the new DLL.
3. Use MoveFileEx with MOVEFILE_DELAY_UNTIL_REBOOT to delete the renamed DLL.

Before you make this replacement, applications will use the original DLL until it is unloaded. After you make the replacement, applications will use the new DLL. When you write a DLL, you must be careful to ensure that it is prepared for this situation, especially if the DLL maintains global state information or communicates with other services. If the DLL is not prepared for a change in global state information or communication protocols, updating the DLL will require you to restart the computer to ensure that all application sare using the same version of the DLL.


Dynamic-Link Library security

When an application dynamically loads a dynamic-link library without specifying a fully qualified path name, Windows attempts to locate the DLL by searching a well-defined set of directories in a particular order, as described in Dynamic-Link Library Search Order. If an attacker gains control of one of the directories on the DLL search path, it can place a malicious copy of the DLL in that directory. This is sometimes called a DLL preloading attack or a binary planting attack. If the system does not find a legitimate copy of the DLL before it searches the compromised directory, it loads the malicious DLL. If the application is running with administrator privileges, the attakcer may succeed in local privilege elevation.

For example, suppose an application is designed to load a DLL from the user's current directory and fail gracefully if the DLL is not found. The application calls LoadLibrary with just the name of the DLL, which causes the system to search for the DLL. Assuming safe DLL search mode is enabled and the application is not using an alternate search order, the system searches directories in the following order:

1. The directory from which the application loaded.
2. The system directory
3. The 16-bit system directory.
4. The Windows directory.
5. The current directory.
6. The directories that are listed in the PATH environment variable.

Continuing the example, an attacker with knowledge of the application gains control of the current directory and places a malicious copy of the DLL in that directory. When the application issues the LoadLibrary call, the system searches for the DLL, finds the malicious copy of the DLL in the current directory, and loads it. The malicious copy of the DLL then  runs within the application and gains the privileges of the user.

Developers can help safeguard their applications aginst DLL preloading attacks by following these guidelines:

* Wherever possible, specify a fully qualified path when using the LoadLibrary, LoadLibraryEx, CreateProcess, or ShellExecute function.
* Use the LOAD_LIBRARY_SEARCH flags with LoadLibraryEx function, or use these flags with the SetDefaultDLLDirectories functions to establish a DLL search order for a process and then use the AddDllDirectory or SetDllDirectory functions to modify the list. For more information, see Dynamic-Link Library Search order.
* On Systems with KB2533623 installed, use the LOAD_LIBRARY_SEARCH flags with the LoadLibraryEx function, or use these flags with the SetDefaultDllDirectories function to establish a DLL search order for a process and then use the Add
* Consider using DLL redirection or a manifest to ensure that your application uses the correct DLL.
* When using the standard search order, make sure that safe DLL search mode is enabled. This places the users current directory later in the search order, increasing the chances that Windows willl find legitimate copy of the DLL before a malicious copy. Safe DLL search mode is enabled by default starting with Windows XP with Service Pack2(SP2) and is controlled by the regstry value.
* Consider removing the current directory from the standard search path by calling SetDllDirectory with an empty string. This sohould be done once early in process initialization, not before and after calls to LoadLibrary. Be aware that SetDllDirectory affects the entire process and That multiple threads calling SetDllDirectory with different values can cause undefined behavior. If your application loads third-party DLLs, test carefully to identify any incompatibilities.
* Do not use the SearchPath function to retrieve a path to a DLL for a subsequent LoadLibrary call unless safe process search mode is enabled. When safe process search mode is not enabled, the SearchPath function uses a different search order than LoadLibrary and is likely to first search the user's current directory for the specified DLL. To enable safe process search mode for the SearchPath function, use the SetSearchPathMode function with BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE. This moves the current directory to the end of the SearchPath search list for the life of the process. Note that current directory is not removed from the search path, so if the system does not find a legitimate copy of the DLL before it reaches the current directory, the application is still vulnerable. As with SetDllDirectory, calling SetSearchPathMode should be done early in process initialization and it affects the entire process. If your application loads third-party DLLs, test carefully to identify any incompatibilities.
* Do not make assumptions about the operating system version based on a LoadLibrary call that searches for a DLL. IF the application is runnign in an environment where the DLL is legitimately not present but a malicious copu of the dll is in the search path, the malicious copy of the dll may be loaded. Instead, use the recommneded techniqe described in getting the system version.

The process monitor tool can be used to help identify dll load opeartion that might be vulnerable. the process moniter tool can be downlaoded from.


The following procedure describes how to use process monitor to examine dll load opeartions in your application.

To use process Monitor to examine dll load opeartion in your application

1. Start process monitor.
2. In Process Monitor, include the following filers:
* operation is createfile
operation is loadimage
path contains.cpl
path contains .dll
path contains .drv
path contains .exe
path contains .ocx
path contains .scr
path contains .sys
3.Exclude the following filters;
*process name is procmon.exe
*process name is Procmon64.exe
* process name is system
* operation begins with IRP_MJ_
* operation begins with FASTIO_
* result is SUCCESS
* PAth ends with pagefile.sys
4. Attempt to start your application with the current directory set to a specific directory. For example, double-click a file with an extension whose file handler is assinged to your application.
5. check process monitor ouput for paths that look suspicious, such as a call to the current directory to laod a dll. This kind of call might indicate a vulnerability in your application.

