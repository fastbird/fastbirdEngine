# 텍스쳐 레퍼런스

## 파일에서 텍스쳐 읽기

	ITexture* IRenderer::CreateTexture(const char* file, 
		ITexture* pReloadingTexture /*=0*/)

파일에서 텍스쳐를 읽어드릴 때는 이 함수를 사용한다. `file` 인자는 파일 위치이다. 
`pReloadingTexture`는 내부적으로 핫리로딩 기능이 발동되었을 때만 사용된다. 보통 0을 넘겨주면 된다.

이 함수는 ITexture*를 리턴하는데 이것을 스마트 포인터로 받아야 릭이 발생하지 않는다. 로딩된 텍스쳐는 메모리 캐시에 저장되서 후에 같은  `file` 경로가 넘어오게 되면 캐시된 텍스쳐가 빠르게 반환된다.

**예)** 

	SmartPtr<ITexture> pLoadedTexture = gFBEnv->pRenderer->CreateTexture(
		"data/textures/mytexture.dds");


## 런타임에 텍스쳐 생성하기

	ITexture* IRenderer::CreateTexture(void* data, int width, int height, 
		PIXEL_FORMAT format, BUFFER_USAGE usage, 
		int buffer_cpu_access, int type)
	
이 함수는 런타임에 텍스쳐를 생성하기 위해 사용한다.

* `data` 텍스쳐에 넣을 데이터의 포인터이다.

* `width`, `height` : 텍스쳐의 사이즈

* `format` : 텍스쳐의 포멧. DXGI의 포멧과 동일하다. 이미지 텍스쳐의 경우는 주로 `PIXEL_FORMAT_R8G8B8A8_UNORM` 를 넘겨주면 되고, 지원되는 모든 텍스쳐 포멧은 RenderEnums.h의  `PIXEL_FORMAT Enum`을 확인하면 된다.

* `usage` :  지원되는 Usage는 아래와 같다.
 * `BUFFER_USAGE_DEFAULT` : GPU에의해 read/write되는 텍스쳐. 주로 사용되는 Usage.
 * `BUFFER_USAGE_IMMUTABLE` : 처음 생성시 데이터가 바로 GPU로 올라가고 수정이 되지 않는 리소스.
 * `BUFFER_USAGE_DYNAMIC` : CPU에서 프레임당 1회 이상 데이터 수정이 필요한 경우.
 * `BUFFER_USAGE_STAGING` : CPU에서 사용되는 경우. 예를 들어 `BUFFER_USAGE_DEFAULT`로 만들어진 텍스쳐 데이터를 CPU로 카피하고 싶은경우 ITexture::CopyToStaging(..) 함수를 사용하는데 이 때 내부적으로 `BUFFER_USAGE_STAGING`이 명시된 버퍼 텍스쳐가 만들어진다.

* `buffer_cpu_access` : enum BUFFER_CPU_ACCESS_FLAG 의 조합. `BUFFER_CPU_ACCESS_WRITE` 일 경우 CPU가 ITexture::Map()을 통해서 텍스쳐의 데이터를 수정할 수 있다. 이 flag 가 지정되었을 때는 `BUFFER_USAGE_DYNAMIC` 나 `BUFFER_USAGE_STAGING`이 `usage`에 명시되어야 한다. `BUFFER_CPU_ACCESS_READ`를 사용할 때는 `BUFFER_USAGE_STAGING`이 `usage`에 명시되어야 한다.

* `type` : 아래 Enum의 조합.
    
		enum TEXTURE_TYPE
		{
			TEXTURE_TYPE_DEFAULT=0x1,
			TEXTURE_TYPE_COLOR_RAMP=0x2,
			TEXTURE_TYPE_RENDER_TARGET=0x4,
			TEXTURE_TYPE_RENDER_TARGET_SRV=0x8,
			TEXTURE_TYPE_DEPTH_STENCIL=0x10,
			TEXTURE_TYPE_DEPTH_STENCIL_SRV=0x20, //PIXEL_FORMAT_R32_TYPELESS
			TEXTURE_TYPE_CUBE_MAP=0x40,
			TEXTURE_TYPE_MULTISAMPLE = 0x80,
			TEXTURE_TYPE_MIPS = 0x100,
			TEXTURE_TYPE_COUNT
		};

 * `TEXTURE_TYPE_DEFAULT` : 셰이더로 바인딩되는 보통의 텍스쳐
 * `TEXTURE_TYPE_COLOR_RAMP` : 1차원 텍스쳐로 컬러의 범위를 저장하고 있는 텍스쳐. ColorRamp::GenerateColorRampTextureData() 참고.
 * `TEXTURE_TYPE_RENDER_TARGET` : 렌더 타겟으로 사용되면서 셰이더 리소스로 바인딩되지 않는 텍스쳐.
 * `TEXTURE_TYPE_RENDER_TARGET_SRV` : 렌더타겟이면서 셰이더의 리소스로 바인딩 될 수 있는 텍스쳐.
 * `TEXTURE_TYPE_DEPTH_STENCIL` : 뎁스 스텐실 타겟으로 사용되면서 셰이더 리소스로 바인딩되지 않는 텍스쳐.
 * `TEXTURE_TYPE_DEPTH_STENCIL_SRV` : 뎁스 스텐실 타겟이면서 셰이더 리소스로 바인딩 될 수 있는 텍스쳐. 이 경우에 포멧이  PIXEL_FORMAT_R32_TYPELESS 로 지정되어야한다. 셰이더 리소스가 만들질 때는 내부적으로 PIXEL_FORMAT_R32_FLOAT로 만들어준다.
 * `TEXTURE_TYPE_CUBE_MAP` : 이 플래그가 지정되면 6개의 요소를 같는 2D Array Texture가 만들어진다.
 * `TEXTURE_TYPE_MIPS` : 렌더타겟이면서 셰이더로 바인딩 될 경우 이 플래그를 지정해주면 밉맵을 생성해준다.

이 함수는 ITexture*를 반환하고 SmartPtr\<ITexture\> 로 받아야 릭을 방지할 수 있다.


## RenderToTexture Utility class

RenderToTexture 클래스는 사용자가 수동으로 렌더 타겟을 생성하고 신을 렌더링하는 복잡한 절차를 단순하게 만들어 준다. 객체 생성 방법은

	IRenderToTexture* IRenderer::CreateRenderToTexture(bool everyframe)

함수를 사용한다. 사용이 완료된 후에는 IRenderer::DeleteRenderToTexture(IRendertoTexture* p) 를 호출해 준다. 아래는 RTT를 사용하는 2가지 예이다.

### RTT를 사용하여 오브젝트를 텍스쳐에 렌더링 하기.

	// RTT 객체 생성
	auto rtt = gEnv->pRenderer->CreateRenderToTexture(false);

	// 카메라 세팅
	ICamera* cam = rtt->GetCamera();
	cam->SetNearFar(0.01f, 100.0f);	
	Vec3 pos() // camera pos
	Vec3 dir() // camera dir
	cam->SetPos(pos);
	cam->SetDir(dir);

	// Scene 세팅. 이 경우 메시 오브젝트 하나만 붙였다.
	IMeshObject* pMeshObject = GetMeshObject();
	assert(pMeshObject);
	rtt->GetScene()->AttachObject(pMeshObject);

	// 렌더타겟 세팅.
	Vec2I size(128, 128);
	rtt->SetColorTextureDesc(size.x, size.y, PIXEL_FORMAT_R8G8B8A8_UNORM, 
		true, false, false);
	rtt->SetDepthStencilDesc(size.x, size.y, PIXEL_FORMAT_D16_UNORM, false, 
		false);

	rtt->Render();

	SmartPtr<ITexture> pResultTexture = rtt->GetRenderTargetTexture();
	gEnv->pRenderer->DeleteRenderToTexture(rtt);

	// 렌더링된 결과물 텍스쳐. 셰이더로 바인딩 할 수 있다.
	return pResultTexture; 


### RTT를 활용하여 런타임에 환경맵 생성하기

아래의 예제는 RTT 인스턴스를 사용해서 큐브 환경맵의 각 면을 채우는 과정을 보여준다.
	
	void SkySphere::UpdateEnvironmentMap(const Vec3& origin)
	{
		if (!mRT)
		{
			mRT = gFBEnv->pRenderer->CreateRenderToTexture(false);
			// 아래 함수의 인자 설명 : 
			// IRenderToTexture::SetColorTextureDesc(width, height, format, 
			// 			IsShaderResource, NeedTogenerateMipmap, IsCubemap)
			mRT->SetColorTextureDesc(ENV_SIZE, ENV_SIZE, 
				PIXEL_FORMAT_R8G8B8A8_UNORM, true, true, true);
		}
		
		ITexture* pTexture = mRT->GetRenderTargetTexture();
		// 씬에 SkySphere를 붙인다.
		mRT->GetScene()->AttachSkySphere(this);
		
		// 카메라 세팅. origin을 환경맵을 찍을 카메라 위치.
		mRT->GetCamera()->SetPos(origin);
		mRT->GetCamera()->SetFOV(HALF_PI);
		mRT->GetCamera()->SetAspectRatio(1.0f);
		Vec3 dirs[] = {
			Vec3(1, 0, 0), Vec3(-1, 0, 0),
			Vec3(0, 0, 1), Vec3(0, 0, -1),
			Vec3(0, 1, 0), Vec3(0, -1, 0),
		};
		
		// 큐브의 6개의 면을 렌더링 해준다.
		for (int i = 0; i < 6; i++)
		{
			mRT->GetCamera()->SetDir(dirs[i]);
			mRT->Render(i);
		}

		// 밉을 생성해줌.
		pTexture->GenerateMips();
		// 제대로 생성되었는지 파일로 저장해서 확인해 보고 싶을 경우 코멘트를 푼다.
		// pTexture->SaveToFile("environment.dds");
		gFBEnv->pRenderer->SetEnvironmentTexture(pTexture);
		mRT->GetScene()->DetachSkySphere();
	}


## Default Usage를 갖는 텍스쳐의 내용을 CPU에서 읽고 싶을 경우.

예를들어 위에서 생성한 큐브맵의 3번째 LOD를 읽고 싶을 경우는 아래와 같이 한다.

	const int usingLod = 2; // if ENV_SIZE == 1024, we are using 256 size.
	// 가장 세밀한 LOD에서 텍스쳐 사이즈가 1024면 width가 256이 된다.
	const int width = (int)(ENV_SIZE / pow(2, usingLod)); 
	// BUFFER_USAGE_STAGING을 명시해서 스테이징 텍스쳐(CPU에서 조작가능한)를 생성해준다.
	SmartPtr<ITexture> pStaging = gFBEnv->pRenderer->CreateTexture(0, width, 
		width, PIXEL_FORMAT_R8G8B8A8_UNORM,	BUFFER_USAGE_STAGING, 
		BUFFER_CPU_ACCESS_READ, TEXTURE_TYPE_CUBE_MAP);
	for (int i = 0; i < 6; i++)
	{
		// 이 면에 맞는 서브리소스 인덱스를 계산한다.
		unsigned subResource = i * (maxLod+1) + usingLod;
		pTex->CopyToStaging(pStaging, i, 0, 0, 0, subResource, 0);
	}
	pStaging->SaveToFile("envSub.dds");


위 예제에서  CopyToStaging은 아래와 같이 정의되어 있다.

	void ITexture::CopyToStaging(ITexture* dst, UINT dstSubresource, UINT dstX, 
		UINT dstY, UINT dstZ, UINT srcSubresource, Box3D* srcBox)
			
* `dst` : 목적지 Staging Texture의 포인터.
* `dstSubresource` : 목적지의 서브 리소스 인덱스. 위의 예제에서는 각 cubemap의 면들이 subresource의 인덱스가 된다.
* `dstX`, `dstY`, `dstZ` : 카피해 넣을 포지션.
* `srcSubresource` : 소스의 서브리소스 인덱스. 위의 예제에서는 밉맵이 생성된 큐브맵이 소스인데, 큐브맵은 2D Texture가 6개가 묶인 Array이다. 서브 리소스 순서는

    miplevel이 11개의 경우

		0 : 첫번째 텍스쳐의 LOD0(most detailed)
		1 : 첫번째 텍스쳐의 LOD1
		2 : 첫번째 텍스쳐의 LOD2
		.
		.


		11 : 두번째 텍스쳐의 LOD0			
		12 : 두번째 텍스쳐의 LOD1
		13 : 두번째 텍스쳐의 LOD2

순이다. 우리가 가져오려는 데이터는 LOD2에 있기 때문에 아래와 같은 식으로 인덱스를 찾을 수 있다.

	// maxLod에 10이 들어있다. 그래서 +1.
	unsigned subResource = i * (maxLod+1) + usingLod; 
			
			
## Dynamic혹은 Staging 텍스쳐 맵핑하기

ITexture::Map() 함수를 사용하여 텍스쳐를 매핑할 수 있다. 아래는 예제 코드.

	//--------------------------------------------------------------------------
	void Material::RefreshColorRampTexture(int slot, BINDING_SHADER shader)
	{
		ITexture* pTexture = 0;
		FindTextureIn(shader, slot, &pTexture);
		assert(pTexture!=0 && pTexture->GetType() == TEXTURE_TYPE_COLOR_RAMP);

		ColorRamp cr = mColorRampMap[pTexture];
		
		// ITexture::Map() 을 호출한다.
		MapData data = pTexture->Map(0, MAP_TYPE_WRITE_DISCARD, MAP_FLAG_NONE);
		if (data.pData)
		{
			// bar position is already updated. generate ramp texture data.
			cr.GenerateColorRampTextureData(128);
			
			// 이 메모리 주소에 데이터를 쓰면 된다.
			unsigned int *pixels = (unsigned int*)data.pData; 
			for(unsigned x = 0; x < 128; x++) 
			{
				pixels[127-x] = cr[x].Get4Byte();
			}
			pTexture->Unmap(0); // Map을 호출한 후에는 Unmap도 호출해준다.
		}
		//RemoveTexture(pTexture);

		mColorRampMap[pTexture] = cr;
	}